
import { parseAppRequirements } from './promptParser';
import { generateAppStructure } from './codeStructureGenerator';

/**
 * Analyzes a prompt to understand the code requirements
 */
const analyzeCodeRequirements = (prompt: string) => {
  // Identify the programming language
  const languages = {
    javascript: /javascript|js|node\.?js/i,
    typescript: /typescript|ts/i,
    python: /python|py/i,
    java: /\bjava\b|\bspring\b/i,
    csharp: /c#|csharp|\.net|dotnet/i,
    php: /php/i,
    ruby: /ruby|rails/i,
    go: /\bgo\b|golang/i,
    rust: /rust/i,
    swift: /swift/i,
    kotlin: /kotlin/i
  };

  // Identify the domain or purpose
  const domains = {
    web: /web|html|css|frontend|front-end|back-end|backend|full-stack|fullstack/i,
    mobile: /mobile|android|ios|app|react\s*native|flutter/i,
    data: /data|analysis|analytics|visualization|machine learning|ml|ai|statistics/i,
    game: /game|gaming|unity|unreal|godot/i,
    blockchain: /blockchain|crypto|web3|ethereum|bitcoin/i,
    system: /system|os|kernel|low-level|embedded/i,
    automation: /automation|script|bot|crawler|scraper/i
  };

  // Detect language
  let detectedLanguage = 'javascript'; // Default
  for (const [lang, pattern] of Object.entries(languages)) {
    if (pattern.test(prompt)) {
      detectedLanguage = lang;
      break;
    }
  }

  // Detect domain
  let detectedDomain = 'web'; // Default
  for (const [domain, pattern] of Object.entries(domains)) {
    if (pattern.test(prompt)) {
      detectedDomain = domain;
      break;
    }
  }

  // Detect specific frameworks or libraries
  const frameworks: Record<string, RegExp> = {
    react: /react/i,
    angular: /angular/i,
    vue: /vue/i,
    express: /express/i,
    django: /django/i,
    flask: /flask/i,
    spring: /spring/i,
    laravel: /laravel/i,
    tensorflow: /tensorflow|tf/i,
    pytorch: /pytorch|torch/i
  };

  let detectedFrameworks = [];
  for (const [framework, pattern] of Object.entries(frameworks)) {
    if (pattern.test(prompt)) {
      detectedFrameworks.push(framework);
    }
  }

  return {
    language: detectedLanguage,
    domain: detectedDomain,
    frameworks: detectedFrameworks,
    rawPrompt: prompt
  };
};

/**
 * Generates code based on the given requirements
 */
const generateCodeFromRequirements = (requirements: ReturnType<typeof analyzeCodeRequirements>) => {
  const { language, domain, frameworks, rawPrompt } = requirements;
  
  // Extract the main action from the prompt
  const createFunction = /function|method|create\s+a\s+function|write\s+a\s+function/i.test(rawPrompt);
  const createClass = /class|object|create\s+a\s+class|write\s+a\s+class/i.test(rawPrompt);
  const createApi = /api|endpoint|route|server|create\s+an?\s+api|write\s+an?\s+api/i.test(rawPrompt);
  const createComponent = /component|ui|interface|create\s+a\s+component|write\s+a\s+component/i.test(rawPrompt);
  const createAlgorithm = /algorithm|sort|search|solve/i.test(rawPrompt);
  
  let code = "";
  
  // Standard header for the generated code
  code += `/**\n * Generated by Hayagriva AI Code Generator\n * Based on prompt: ${rawPrompt}\n */\n\n`;
  
  // Generate appropriate code based on detected requirements
  if (createFunction) {
    code += generateFunction(language, rawPrompt);
  } else if (createClass) {
    code += generateClass(language, rawPrompt);
  } else if (createApi) {
    code += generateApi(language, frameworks, rawPrompt);
  } else if (createComponent) {
    code += generateComponent(language, frameworks, rawPrompt);
  } else if (createAlgorithm) {
    code += generateAlgorithm(language, rawPrompt);
  } else {
    // Default to generating a function if no specific type is detected
    code += generateFunction(language, rawPrompt);
  }
  
  return code;
};

/**
 * Generate a function based on the language and prompt
 */
const generateFunction = (language: string, prompt: string) => {
  // Extract potential function name from the prompt
  const nameMatch = prompt.match(/(?:function|method|create|implement|write)\s+(?:a|an|the)?\s*(\w+)/i);
  const functionName = nameMatch ? nameMatch[1].toLowerCase() : "processData";
  
  // Try to determine what the function should do
  let functionPurpose = "";
  if (/calculate|compute|sum|average|mean|total/i.test(prompt)) {
    functionPurpose = "calculation";
  } else if (/convert|transform|parse|format/i.test(prompt)) {
    functionPurpose = "transformation";
  } else if (/validate|check|verify|test/i.test(prompt)) {
    functionPurpose = "validation";
  } else if (/sort|order|arrange/i.test(prompt)) {
    functionPurpose = "sorting";
  } else if (/filter|find|search/i.test(prompt)) {
    functionPurpose = "filtering";
  } else if (/fetch|get|retrieve|request|api/i.test(prompt)) {
    functionPurpose = "dataFetching";
  }
  
  let code = "";
  
  switch (language) {
    case 'javascript':
    case 'typescript':
      const isAsync = /async|promise|fetch|axios|http|api|request/i.test(prompt);
      const tsType = language === 'typescript' ? `: any` : '';
      const asyncPrefix = isAsync ? 'async ' : '';
      
      if (functionPurpose === "calculation") {
        code = `${asyncPrefix}function ${functionName}(numbers${language === 'typescript' ? ': number[]' : ''})${language === 'typescript' ? ': number' : ''} {
  return numbers.reduce((sum, num) => sum + num, 0);
}`;
      } else if (functionPurpose === "transformation") {
        code = `${asyncPrefix}function ${functionName}(data${tsType}) {
  // Transform the data
  return data.map(item => ({
    ...item,
    transformed: true,
    timestamp: new Date().toISOString()
  }));
}`;
      } else if (functionPurpose === "validation") {
        code = `function ${functionName}(data${tsType})${language === 'typescript' ? ': boolean' : ''} {
  // Validate the data
  if (!data) return false;
  if (Array.isArray(data) && data.length === 0) return false;
  if (typeof data === 'object' && Object.keys(data).length === 0) return false;
  return true;
}`;
      } else if (functionPurpose === "sorting") {
        code = `function ${functionName}(items${language === 'typescript' ? ': any[]' : ''})${language === 'typescript' ? ': any[]' : ''} {
  return [...items].sort((a, b) => {
    if (typeof a === 'number' && typeof b === 'number') {
      return a - b;
    } else {
      return String(a).localeCompare(String(b));
    }
  });
}`;
      } else if (functionPurpose === "filtering") {
        code = `function ${functionName}(items${language === 'typescript' ? ': any[]' : ''}, criteria${tsType})${language === 'typescript' ? ': any[]' : ''} {
  return items.filter(item => {
    for (const key in criteria) {
      if (item[key] !== criteria[key]) {
        return false;
      }
    }
    return true;
  });
}`;
      } else if (functionPurpose === "dataFetching") {
        code = `async function ${functionName}(url${language === 'typescript' ? ': string' : ''})${language === 'typescript' ? ': Promise<any>' : ''} {
  try {
    const response = await fetch(url);
    if (!response.ok) {
      throw new Error(\`HTTP error! status: \${response.status}\`);
    }
    const data = await response.json();
    return data;
  } catch (error) {
    console.error('Fetching data failed:', error);
    throw error;
  }
}`;
      } else {
        // Generic function
        code = `${asyncPrefix}function ${functionName}(data${tsType}) {
  // Process the data
  console.log('Processing data:', data);
  return {
    processed: true,
    original: data,
    timestamp: new Date().toISOString()
  };
}`;
      }
      break;
    
    case 'python':
      if (functionPurpose === "calculation") {
        code = `def ${functionName}(numbers):
    """
    Calculate the sum of numbers
    
    Args:
        numbers (list): A list of numbers to sum
        
    Returns:
        float: Sum of all numbers
    """
    return sum(numbers)`;
      } else {
        code = `def ${functionName}(data):
    """
    Process the given data
    
    Args:
        data: The data to process
        
    Returns:
        dict: Processed data
    """
    import datetime
    
    print(f"Processing data: {data}")
    return {
        "processed": True,
        "original": data,
        "timestamp": datetime.datetime.now().isoformat()
    }`;
      }
      break;
      
    // Add more languages as needed
    
    default:
      code = `// Sorry, code generation for ${language} is not yet supported.
// Here's a JavaScript version instead:

function ${functionName}(data) {
  // Process the data
  console.log('Processing data:', data);
  return {
    processed: true,
    original: data,
    timestamp: new Date().toISOString()
  };
}`;
  }
  
  return code;
};

/**
 * Generate a class based on the language and prompt
 */
const generateClass = (language: string, prompt: string) => {
  // Extract potential class name from the prompt
  const nameMatch = prompt.match(/(?:class|object|entity|model)\s+(?:a|an|the)?\s*(\w+)/i);
  const className = nameMatch ? nameMatch[1].charAt(0).toUpperCase() + nameMatch[1].slice(1) : "DataProcessor";
  
  let code = "";
  
  switch (language) {
    case 'javascript':
    case 'typescript':
      const tsTypes = language === 'typescript';
      
      code = `class ${className} {
  ${tsTypes ? 'private data: any;' : ''}
  
  constructor(${tsTypes ? 'data: any' : 'data'}) {
    this.data = data;
  }
  
  process() ${tsTypes ? ': Record<string, any>' : ''} {
    // Process the data
    return {
      processed: true,
      original: this.data,
      timestamp: new Date().toISOString()
    };
  }
  
  toString() ${tsTypes ? ': string' : ''} {
    return JSON.stringify(this.data);
  }
}

// Example usage
const processor = new ${className}({ name: "Sample Data" });
console.log(processor.process());`;
      break;
      
    case 'python':
      code = `class ${className}:
    def __init__(self, data):
        """
        Initialize with data
        
        Args:
            data: The data to process
        """
        self.data = data
        
    def process(self):
        """
        Process the data
        
        Returns:
            dict: Processed data
        """
        import datetime
        
        return {
            "processed": True,
            "original": self.data,
            "timestamp": datetime.datetime.now().isoformat()
        }
        
    def __str__(self):
        return str(self.data)

# Example usage
processor = ${className}({"name": "Sample Data"})
print(processor.process())`;
      break;
      
    default:
      code = `// Sorry, code generation for ${language} is not yet supported.
// Here's a JavaScript version instead:

class ${className} {
  constructor(data) {
    this.data = data;
  }
  
  process() {
    // Process the data
    return {
      processed: true,
      original: this.data,
      timestamp: new Date().toISOString()
    };
  }
  
  toString() {
    return JSON.stringify(this.data);
  }
}`;
  }
  
  return code;
};

/**
 * Generate an API based on the language, frameworks, and prompt
 */
const generateApi = (language: string, frameworks: string[], prompt: string) => {
  // Default to Express if no other framework is specified for JavaScript/TypeScript
  const jsFramework = frameworks.includes('express') ? 'express' : 
                      frameworks.includes('koa') ? 'koa' : 'express';
                      
  // Default to Flask if no other framework is specified for Python
  const pyFramework = frameworks.includes('django') ? 'django' :
                      frameworks.includes('fastapi') ? 'fastapi' : 'flask';
  
  // Determine API purpose
  let apiPurpose = "";
  if (/user|auth|login|register|signin|signup/i.test(prompt)) {
    apiPurpose = "auth";
  } else if (/product|item|inventory/i.test(prompt)) {
    apiPurpose = "products";
  } else if (/order|purchase|transaction|payment/i.test(prompt)) {
    apiPurpose = "orders";
  } else {
    apiPurpose = "general";
  }
  
  let code = "";
  
  switch (language) {
    case 'javascript':
    case 'typescript':
      if (jsFramework === 'express') {
        const tsImport = language === 'typescript' ? 
          `import express, { Request, Response } from 'express';\n` : 
          `const express = require('express');\n`;
        
        if (apiPurpose === "auth") {
          code = `${tsImport}const router = express.Router();

/**
 * User authentication routes
 */

// Register a new user
router.post('/register', ${language === 'typescript' ? '(req: Request, res: Response)' : '(req, res)'} => {
  const { username, email, password } = req.body;
  
  // In a real application, validate inputs and hash password
  
  // For demo purposes
  res.status(201).json({
    success: true,
    message: 'User registered successfully',
    user: { id: 1, username, email }
  });
});

// User login
router.post('/login', ${language === 'typescript' ? '(req: Request, res: Response)' : '(req, res)'} => {
  const { email, password } = req.body;
  
  // In a real application, validate credentials
  
  // For demo purposes
  res.status(200).json({
    success: true,
    message: 'Login successful',
    token: 'sample-jwt-token',
    user: { id: 1, email }
  });
});

// Get user profile
router.get('/profile', ${language === 'typescript' ? '(req: Request, res: Response)' : '(req, res)'} => {
  // In a real application, this would be protected by authorization middleware
  res.status(200).json({
    id: 1,
    username: 'sampleuser',
    email: 'user@example.com',
    created_at: new Date().toISOString()
  });
});

${language === 'typescript' ? 'export default router;' : 'module.exports = router;'}`;
        } else if (apiPurpose === "products") {
          code = `${tsImport}const router = express.Router();

/**
 * Product routes
 */

// Get all products
router.get('/', ${language === 'typescript' ? '(req: Request, res: Response)' : '(req, res)'} => {
  // In a real application, fetch from database
  const products = [
    { id: 1, name: 'Product 1', price: 19.99 },
    { id: 2, name: 'Product 2', price: 29.99 },
    { id: 3, name: 'Product 3', price: 39.99 }
  ];
  
  res.status(200).json(products);
});

// Get a single product
router.get('/:id', ${language === 'typescript' ? '(req: Request, res: Response)' : '(req, res)'} => {
  const id = parseInt(req.params.id);
  
  // In a real application, fetch from database
  const product = { id, name: \`Product \${id}\`, price: 19.99 * id };
  
  res.status(200).json(product);
});

// Create a new product
router.post('/', ${language === 'typescript' ? '(req: Request, res: Response)' : '(req, res)'} => {
  const { name, price } = req.body;
  
  // In a real application, save to database
  
  res.status(201).json({
    id: Date.now(),
    name,
    price,
    created_at: new Date().toISOString()
  });
});

// Update a product
router.put('/:id', ${language === 'typescript' ? '(req: Request, res: Response)' : '(req, res)'} => {
  const id = parseInt(req.params.id);
  const { name, price } = req.body;
  
  // In a real application, update in database
  
  res.status(200).json({
    id,
    name,
    price,
    updated_at: new Date().toISOString()
  });
});

// Delete a product
router.delete('/:id', ${language === 'typescript' ? '(req: Request, res: Response)' : '(req, res)'} => {
  const id = parseInt(req.params.id);
  
  // In a real application, delete from database
  
  res.status(200).json({ 
    success: true, 
    message: \`Product \${id} deleted successfully\` 
  });
});

${language === 'typescript' ? 'export default router;' : 'module.exports = router;'}`;
        } else {
          code = `${tsImport}const router = express.Router();

/**
 * API routes
 */

// Get all items
router.get('/', ${language === 'typescript' ? '(req: Request, res: Response)' : '(req, res)'} => {
  // In a real application, fetch from database
  const items = [
    { id: 1, name: 'Item 1' },
    { id: 2, name: 'Item 2' },
    { id: 3, name: 'Item 3' }
  ];
  
  res.status(200).json(items);
});

// Get a single item
router.get('/:id', ${language === 'typescript' ? '(req: Request, res: Response)' : '(req, res)'} => {
  const id = parseInt(req.params.id);
  
  // In a real application, fetch from database
  const item = { id, name: \`Item \${id}\` };
  
  res.status(200).json(item);
});

// Create a new item
router.post('/', ${language === 'typescript' ? '(req: Request, res: Response)' : '(req, res)'} => {
  const { name } = req.body;
  
  // In a real application, save to database
  
  res.status(201).json({
    id: Date.now(),
    name,
    created_at: new Date().toISOString()
  });
});

// Update an item
router.put('/:id', ${language === 'typescript' ? '(req: Request, res: Response)' : '(req, res)'} => {
  const id = parseInt(req.params.id);
  const { name } = req.body;
  
  // In a real application, update in database
  
  res.status(200).json({
    id,
    name,
    updated_at: new Date().toISOString()
  });
});

// Delete an item
router.delete('/:id', ${language === 'typescript' ? '(req: Request, res: Response)' : '(req, res)'} => {
  const id = parseInt(req.params.id);
  
  // In a real application, delete from database
  
  res.status(200).json({ 
    success: true, 
    message: \`Item \${id} deleted successfully\` 
  });
});

${language === 'typescript' ? 'export default router;' : 'module.exports = router;'}`;
        }
      }
      break;
      
    case 'python':
      if (pyFramework === 'flask') {
        code = `from flask import Flask, request, jsonify

app = Flask(__name__)

# API routes
@app.route('/api/items', methods=['GET'])
def get_items():
    # In a real application, fetch from database
    items = [
        {"id": 1, "name": "Item 1"},
        {"id": 2, "name": "Item 2"},
        {"id": 3, "name": "Item 3"}
    ]
    
    return jsonify(items)

@app.route('/api/items/<int:item_id>', methods=['GET'])
def get_item(item_id):
    # In a real application, fetch from database
    item = {"id": item_id, "name": f"Item {item_id}"}
    
    return jsonify(item)

@app.route('/api/items', methods=['POST'])
def create_item():
    data = request.get_json()
    name = data.get('name')
    
    # In a real application, save to database
    import datetime
    
    new_item = {
        "id": 1000,  # In a real app, this would be from the database
        "name": name,
        "created_at": datetime.datetime.now().isoformat()
    }
    
    return jsonify(new_item), 201

@app.route('/api/items/<int:item_id>', methods=['PUT'])
def update_item(item_id):
    data = request.get_json()
    name = data.get('name')
    
    # In a real application, update in database
    import datetime
    
    updated_item = {
        "id": item_id,
        "name": name,
        "updated_at": datetime.datetime.now().isoformat()
    }
    
    return jsonify(updated_item)

@app.route('/api/items/<int:item_id>', methods=['DELETE'])
def delete_item(item_id):
    # In a real application, delete from database
    
    return jsonify({
        "success": True,
        "message": f"Item {item_id} deleted successfully"
    })

if __name__ == '__main__':
    app.run(debug=True)`;
      }
      break;
      
    default:
      code = `// Sorry, API code generation for ${language} is not yet supported.
// Here's a JavaScript/Express version instead:

const express = require('express');
const router = express.Router();

/**
 * API routes
 */

// Get all items
router.get('/', (req, res) => {
  // In a real application, fetch from database
  const items = [
    { id: 1, name: 'Item 1' },
    { id: 2, name: 'Item 2' },
    { id: 3, name: 'Item 3' }
  ];
  
  res.status(200).json(items);
});

// Get a single item
router.get('/:id', (req, res) => {
  const id = parseInt(req.params.id);
  
  // In a real application, fetch from database
  const item = { id, name: \`Item \${id}\` };
  
  res.status(200).json(item);
});

// Create a new item
router.post('/', (req, res) => {
  const { name } = req.body;
  
  // In a real application, save to database
  
  res.status(201).json({
    id: Date.now(),
    name,
    created_at: new Date().toISOString()
  });
});

module.exports = router;`;
  }
  
  return code;
};

/**
 * Generate a component based on the language, frameworks, and prompt
 */
const generateComponent = (language: string, frameworks: string[], prompt: string) => {
  // Default to React if no other UI framework is specified
  const uiFramework = frameworks.includes('react') ? 'react' : 
                      frameworks.includes('vue') ? 'vue' :
                      frameworks.includes('angular') ? 'angular' : 'react';
                      
  // Try to determine component type
  let componentType = "";
  if (/button|click/i.test(prompt)) {
    componentType = "button";
  } else if (/card|box|container/i.test(prompt)) {
    componentType = "card";
  } else if (/form|input|submit/i.test(prompt)) {
    componentType = "form";
  } else if (/list|table|grid/i.test(prompt)) {
    componentType = "list";
  } else if (/modal|dialog|popup/i.test(prompt)) {
    componentType = "modal";
  } else if (/nav|menu|sidebar/i.test(prompt)) {
    componentType = "navigation";
  } else {
    componentType = "generic";
  }
  
  // Extract potential component name from the prompt
  const nameMatch = prompt.match(/(?:component|ui|element|create)\s+(?:a|an|the)?\s*(\w+)/i);
  const rawName = nameMatch ? nameMatch[1] : componentType;
  const componentName = rawName.charAt(0).toUpperCase() + rawName.slice(1) + (componentType !== rawName ? componentType.charAt(0).toUpperCase() + componentType.slice(1) : "");
  
  let code = "";
  
  if (uiFramework === 'react') {
    const tsType = language === 'typescript';
    
    if (componentType === "button") {
      code = `import React${tsType ? ', { ButtonHTMLAttributes }' : ''} from 'react';

${tsType ? `interface ${componentName}Props extends ButtonHTMLAttributes<HTMLButtonElement> {
  variant?: 'primary' | 'secondary' | 'outline';
  size?: 'small' | 'medium' | 'large';
}

` : ''}const ${componentName} = (${tsType ? `props: ${componentName}Props` : 'props'}) => {
  const {
    variant = 'primary',
    size = 'medium',
    children,
    ...buttonProps
  } = props;
  
  const getVariantClass = () => {
    switch (variant) {
      case 'primary':
        return 'bg-blue-500 hover:bg-blue-600 text-white';
      case 'secondary':
        return 'bg-gray-500 hover:bg-gray-600 text-white';
      case 'outline':
        return 'bg-transparent border border-blue-500 text-blue-500 hover:bg-blue-50';
      default:
        return 'bg-blue-500 hover:bg-blue-600 text-white';
    }
  };
  
  const getSizeClass = () => {
    switch (size) {
      case 'small':
        return 'py-1 px-2 text-sm';
      case 'medium':
        return 'py-2 px-4 text-md';
      case 'large':
        return 'py-3 px-6 text-lg';
      default:
        return 'py-2 px-4 text-md';
    }
  };
  
  return (
    <button
      type="button"
      className={\`\${getVariantClass()} \${getSizeClass()} rounded font-medium focus:outline-none focus:ring-2 focus:ring-blue-300 transition-colors\`}
      {...buttonProps}
    >
      {children}
    </button>
  );
};

export default ${componentName};

// Example usage:
// <${componentName} variant="primary" size="medium" onClick={() => console.log('clicked')}>
//   Click Me
// </${componentName}>`;
    } else if (componentType === "card") {
      code = `import React${tsType ? ', { ReactNode }' : ''} from 'react';

${tsType ? `interface ${componentName}Props {
  title?: string;
  subtitle?: string;
  children: ReactNode;
  footer?: ReactNode;
  imageUrl?: string;
  onClick?: () => void;
}

` : ''}const ${componentName} = (${tsType ? `props: ${componentName}Props` : '{ title, subtitle, children, footer, imageUrl, onClick }'}) => {
  const { title, subtitle, children, footer, imageUrl, onClick } = props;
  
  return (
    <div 
      className="bg-white rounded-lg shadow-md overflow-hidden hover:shadow-lg transition-shadow cursor-pointer"
      onClick={onClick}
    >
      {imageUrl && (
        <div className="w-full h-48 overflow-hidden">
          <img 
            src={imageUrl} 
            alt={title || 'Card image'} 
            className="w-full h-full object-cover"
          />
        </div>
      )}
      
      <div className="p-4">
        {title && <h3 className="text-lg font-semibold text-gray-800">{title}</h3>}
        {subtitle && <p className="text-sm text-gray-500 mt-1">{subtitle}</p>}
        
        <div className="mt-4">
          {children}
        </div>
      </div>
      
      {footer && (
        <div className="border-t p-4">
          {footer}
        </div>
      )}
    </div>
  );
};

export default ${componentName};

// Example usage:
// <${componentName}
//   title="Card Title"
//   subtitle="Card subtitle text"
//   imageUrl="https://example.com/image.jpg"
//   footer={<div className="flex justify-end"><button>Action</button></div>}
//   onClick={() => console.log('Card clicked')}
// >
//   <p>This is the main content of the card.</p>
// </${componentName}>`;
    } else if (componentType === "form") {
      code = `import React${tsType ? ', { FormEvent, useState }' : ', { useState }'} from 'react';

${tsType ? `interface ${componentName}Props {
  onSubmit: (formData: Record<string, string>) => void;
  initialValues?: Record<string, string>;
}

` : ''}const ${componentName} = (${tsType ? `props: ${componentName}Props` : '{ onSubmit, initialValues = {} }'}) => {
  const { onSubmit, initialValues = {} } = props;
  const [formData, setFormData] = useState(initialValues);
  const [errors, setErrors] = useState({});
  
  const handleChange = (e${tsType ? ': React.ChangeEvent<HTMLInputElement>' : ''}) => {
    const { name, value } = e.target;
    setFormData(prev => ({ ...prev, [name]: value }));
    
    // Clear error when field is edited
    if (errors[name]) {
      setErrors(prev => ({ ...prev, [name]: null }));
    }
  };
  
  const validate = () => {
    const newErrors = {};
    
    // Example validation for a registration form
    if (!formData.name?.trim()) {
      newErrors.name = 'Name is required';
    }
    
    if (!formData.email?.trim()) {
      newErrors.email = 'Email is required';
    } else if (!/\\S+@\\S+\\.\\S+/.test(formData.email)) {
      newErrors.email = 'Email is invalid';
    }
    
    if (!formData.password?.trim()) {
      newErrors.password = 'Password is required';
    } else if (formData.password.length < 6) {
      newErrors.password = 'Password must be at least 6 characters';
    }
    
    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };
  
  const handleSubmit = (e${tsType ? ': FormEvent<HTMLFormElement>' : ''}) => {
    e.preventDefault();
    
    if (validate()) {
      onSubmit(formData);
    }
  };
  
  return (
    <form onSubmit={handleSubmit} className="space-y-4">
      <div>
        <label htmlFor="name" className="block text-sm font-medium text-gray-700">Name</label>
        <input
          type="text"
          id="name"
          name="name"
          value={formData.name || ''}
          onChange={handleChange}
          className={\`mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring focus:ring-blue-500 focus:ring-opacity-50 \${errors.name ? 'border-red-500' : ''}\`}
        />
        {errors.name && <p className="mt-1 text-sm text-red-500">{errors.name}</p>}
      </div>
      
      <div>
        <label htmlFor="email" className="block text-sm font-medium text-gray-700">Email</label>
        <input
          type="email"
          id="email"
          name="email"
          value={formData.email || ''}
          onChange={handleChange}
          className={\`mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring focus:ring-blue-500 focus:ring-opacity-50 \${errors.email ? 'border-red-500' : ''}\`}
        />
        {errors.email && <p className="mt-1 text-sm text-red-500">{errors.email}</p>}
      </div>
      
      <div>
        <label htmlFor="password" className="block text-sm font-medium text-gray-700">Password</label>
        <input
          type="password"
          id="password"
          name="password"
          value={formData.password || ''}
          onChange={handleChange}
          className={\`mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring focus:ring-blue-500 focus:ring-opacity-50 \${errors.password ? 'border-red-500' : ''}\`}
        />
        {errors.password && <p className="mt-1 text-sm text-red-500">{errors.password}</p>}
      </div>
      
      <div>
        <button 
          type="submit"
          className="w-full py-2 px-4 bg-blue-600 hover:bg-blue-700 text-white rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-opacity-50 transition-colors"
        >
          Submit
        </button>
      </div>
    </form>
  );
};

export default ${componentName};

// Example usage:
// <${componentName} 
//   onSubmit={(data) => console.log('Form submitted:', data)} 
//   initialValues={{ name: 'John Doe', email: 'john@example.com' }} 
// />`;
    } else {
      // Generic component
      code = `import React${tsType ? ', { ReactNode }' : ''} from 'react';

${tsType ? `interface ${componentName}Props {
  title?: string;
  children?: ReactNode;
  className?: string;
}

` : ''}const ${componentName} = (${tsType ? `props: ${componentName}Props` : '{ title, children, className = "" }'}) => {
  const { title, children, className = "" } = props;
  
  return (
    <div className={\`p-4 border rounded-md \${className}\`}>
      {title && <h2 className="text-xl font-bold mb-4">{title}</h2>}
      <div>
        {children}
      </div>
    </div>
  );
};

export default ${componentName};

// Example usage:
// <${componentName} title="Component Title" className="bg-gray-100">
//   <p>This is the component content.</p>
// </${componentName}>`;
    }
  }
  
  return code;
};

/**
 * Generate an algorithm based on the language and prompt
 */
const generateAlgorithm = (language: string, prompt: string) => {
  // Try to determine algorithm type
  let algorithmType = "";
  if (/sort|sorting|order|arrange/i.test(prompt)) {
    algorithmType = "sorting";
  } else if (/search|find|locate/i.test(prompt)) {
    algorithmType = "search";
  } else if (/path|graph|traverse/i.test(prompt)) {
    algorithmType = "pathfinding";
  }
  
  let code = "";
  
  switch (language) {
    case 'javascript':
    case 'typescript':
      if (algorithmType === "sorting") {
        code = `/**
 * Quick Sort Implementation
 * @param {${language === 'typescript' ? 'number[]' : 'Array'}} arr - Array to sort
 * @returns {${language === 'typescript' ? 'number[]' : 'Array'}} - Sorted array
 */
function quickSort(arr${language === 'typescript' ? ': number[]' : ''})${language === 'typescript' ? ': number[]' : ''} {
  if (arr.length <= 1) {
    return arr;
  }
  
  const pivot = arr[Math.floor(arr.length / 2)];
  const left = [];
  const right = [];
  const equal = [];
  
  for (const val of arr) {
    if (val < pivot) {
      left.push(val);
    } else if (val > pivot) {
      right.push(val);
    } else {
      equal.push(val);
    }
  }
  
  return [...quickSort(left), ...equal, ...quickSort(right)];
}

// Example usage
const unsortedArray = [64, 34, 25, 12, 22, 11, 90];
console.log('Unsorted array:', unsortedArray);

const sortedArray = quickSort(unsortedArray);
console.log('Sorted array:', sortedArray);`;
      } else if (algorithmType === "search") {
        code = `/**
 * Binary Search Implementation
 * @param {${language === 'typescript' ? 'number[]' : 'Array'}} arr - Sorted array to search in
 * @param {number} target - Value to search for
 * @returns {number} - Index of target or -1 if not found
 */
function binarySearch(arr${language === 'typescript' ? ': number[]' : ''}, target${language === 'typescript' ? ': number' : ''})${language === 'typescript' ? ': number' : ''} {
  let left = 0;
  let right = arr.length - 1;
  
  while (left <= right) {
    const mid = Math.floor((left + right) / 2);
    
    if (arr[mid] === target) {
      return mid;
    } else if (arr[mid] < target) {
      left = mid + 1;
    } else {
      right = mid - 1;
    }
  }
  
  return -1; // Target not found
}

// Example usage
const sortedArray = [11, 12, 22, 25, 34, 64, 90];
const target = 25;

console.log(\`Array: \${sortedArray}\`);
console.log(\`Searching for: \${target}\`);

const index = binarySearch(sortedArray, target);
if (index !== -1) {
  console.log(\`Found at index: \${index}\`);
} else {
  console.log('Target not found in the array');
}`;
      } else {
        code = `/**
 * Fibonacci Sequence Implementation
 * @param {number} n - Number of Fibonacci numbers to generate
 * @returns {${language === 'typescript' ? 'number[]' : 'Array'}} - Array of Fibonacci numbers
 */
function generateFibonacci(n${language === 'typescript' ? ': number' : ''})${language === 'typescript' ? ': number[]' : ''} {
  const fibSequence = [0, 1];
  
  if (n <= 2) {
    return fibSequence.slice(0, n);
  }
  
  for (let i = 2; i < n; i++) {
    const nextFib = fibSequence[i - 1] + fibSequence[i - 2];
    fibSequence.push(nextFib);
  }
  
  return fibSequence;
}

/**
 * Calculate the nth Fibonacci number efficiently using memoization
 * @param {number} n - Position in the Fibonacci sequence
 * @returns {number} - The nth Fibonacci number
 */
function fibonacci(n${language === 'typescript' ? ': number' : ''}, memo = {})${language === 'typescript' ? ': number' : ''} {
  if (n in memo) {
    return memo[n];
  }
  
  if (n <= 1) {
    return n;
  }
  
  memo[n] = fibonacci(n - 1, memo) + fibonacci(n - 2, memo);
  return memo[n];
}

// Example usage
const count = 10;
console.log(\`First \${count} Fibonacci numbers: \${generateFibonacci(count).join(', ')}\`);

const position = 20;
console.log(\`Fibonacci number at position \${position}: \${fibonacci(position)}\`);`;
      }
      break;
      
    case 'python':
      if (algorithmType === "sorting") {
        code = `def quick_sort(arr):
    """
    Quick Sort Implementation
    
    Args:
        arr (list): Array to sort
        
    Returns:
        list: Sorted array
    """
    if len(arr) <= 1:
        return arr
    
    pivot = arr[len(arr) // 2]
    left = [x for x in arr if x < pivot]
    middle = [x for x in arr if x == pivot]
    right = [x for x in arr if x > pivot]
    
    return quick_sort(left) + middle + quick_sort(right)


# Example usage
unsorted_array = [64, 34, 25, 12, 22, 11, 90]
print("Unsorted array:", unsorted_array)

sorted_array = quick_sort(unsorted_array)
print("Sorted array:", sorted_array)`;
      } else if (algorithmType === "search") {
        code = `def binary_search(arr, target):
    """
    Binary Search Implementation
    
    Args:
        arr (list): Sorted array to search in
        target: Value to search for
        
    Returns:
        int: Index of target or -1 if not found
    """
    left, right = 0, len(arr) - 1
    
    while left <= right:
        mid = (left + right) // 2
        
        if arr[mid] == target:
            return mid
        elif arr[mid] < target:
            left = mid + 1
        else:
            right = mid - 1
    
    return -1  # Target not found


# Example usage
sorted_array = [11, 12, 22, 25, 34, 64, 90]
target = 25

print(f"Array: {sorted_array}")
print(f"Searching for: {target}")

index = binary_search(sorted_array, target)
if index != -1:
    print(f"Found at index: {index}")
else:
    print("Target not found in the array")`;
      } else {
        code = `def generate_fibonacci(n):
    """
    Fibonacci Sequence Implementation
    
    Args:
        n (int): Number of Fibonacci numbers to generate
        
    Returns:
        list: Array of Fibonacci numbers
    """
    fib_sequence = [0, 1]
    
    if n <= 2:
        return fib_sequence[:n]
    
    for i in range(2, n):
        next_fib = fib_sequence[i-1] + fib_sequence[i-2]
        fib_sequence.append(next_fib)
    
    return fib_sequence


def fibonacci(n, memo={}):
    """
    Calculate the nth Fibonacci number efficiently using memoization
    
    Args:
        n (int): Position in the Fibonacci sequence
        memo (dict): Memoization dictionary
        
    Returns:
        int: The nth Fibonacci number
    """
    if n in memo:
        return memo[n]
    
    if n <= 1:
        return n
    
    memo[n] = fibonacci(n-1, memo) + fibonacci(n-2, memo)
    return memo[n]


# Example usage
count = 10
print(f"First {count} Fibonacci numbers: {generate_fibonacci(count)}")

position = 20
print(f"Fibonacci number at position {position}: {fibonacci(position)}")`;
      }
      break;
      
    default:
      code = `// Sorry, algorithm code generation for ${language} is not yet supported.
// Here's a JavaScript version instead:

/**
 * Algorithm implementation
 */
function algorithm(data) {
  // Process the data
  return data;
}

// Example usage
const testData = [1, 2, 3, 4, 5];
console.log(algorithm(testData));`;
  }
  
  return code;
};

/**
 * Generates a chatbot code based on chat conversation
 * 
 * @param messages Array of chat messages
 * @returns String containing the JavaScript code
 */
export const generateChatbotCode = (messages: Array<{ role: string; content: string }>) => {
  // Extract training data from the conversation
  const trainingData = messages.map(msg => ({
    role: msg.role,
    content: msg.content
  }));

  // Format the code with proper indentation
  const code = `/**
 * Hayagriva Chatbot
 * Generated on: ${new Date().toLocaleString()}
 * 
 * This file contains the code for a standalone Hayagriva chatbot that
 * can be integrated into any web application.
 */

class HayagrivaBot {
  constructor(options = {}) {
    this.name = options.name || 'Hayagriva';
    this.trainingData = ${JSON.stringify(trainingData, null, 2)};
    this.voiceEnabled = options.voiceEnabled !== false;
    this.containerElement = null;
    this.onReady = options.onReady || (() => {});
    this.onMessageSent = options.onMessageSent || (() => {});
    this.onMessageReceived = options.onMessageReceived || (() => {});
  }

  /**
   * Initialize the chatbot and mount it to a DOM element
   * @param {HTMLElement|string} container - DOM element or CSS selector
   * @returns {HayagrivaBot} - The chatbot instance
   */
  mount(container) {
    if (typeof container === 'string') {
      this.containerElement = document.querySelector(container);
    } else {
      this.containerElement = container;
    }
    
    if (!this.containerElement) {
      console.error('Could not find container element');
      return this;
    }
    
    this._createChatInterface();
    this.onReady(this);
    
    return this;
  }
  
  /**
   * Send a message to the chatbot
   * @param {string} message - The message to send
   * @returns {Promise} - Resolves when the response is received
   */
  sendMessage(message) {
    return new Promise((resolve) => {
      this._addMessageToChat('user', message);
      this.onMessageSent(message);
      
      // Simulate AI thinking
      setTimeout(() => {
        const response = this._generateResponse(message);
        this._addMessageToChat('assistant', response);
        this.onMessageReceived(response);
        resolve(response);
        
        if (this.voiceEnabled) {
          this._speakText(response);
        }
      }, 1000);
    });
  }
  
  /**
   * Start voice recognition
   * @returns {Promise} - Resolves when voice recognition ends
   */
  startVoiceRecognition() {
    if (!('webkitSpeechRecognition' in window) && !('SpeechRecognition' in window)) {
      console.error('Speech recognition is not supported in this browser');
      return Promise.reject('Speech recognition not supported');
    }
    
    return new Promise((resolve) => {
      const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;
      const recognition = new SpeechRecognition();
      
      recognition.lang = 'en-US';
      recognition.interimResults = false;
      recognition.maxAlternatives = 1;
      
      recognition.onresult = (event) => {
        const speechResult = event.results[0][0].transcript;
        this.sendMessage(speechResult);
        resolve(speechResult);
      };
      
      recognition.onerror = (event) => {
        console.error('Speech recognition error', event.error);
        resolve('');
      };
      
      recognition.start();
    });
  }
  
  /**
   * Enable or disable voice features
   * @param {boolean} enabled - Whether voice features should be enabled
   */
  setVoiceEnabled(enabled) {
    this.voiceEnabled = enabled;
  }
  
  /**
   * Private: Create the chat interface elements
   */
  _createChatInterface() {
    // Make sure 'name' property is safely accessed with a default value
    const botName = this.name || 'Hayagriva';
    
    if (!this.containerElement) {
      console.error('Container element is not defined');
      return;
    }
    
    this.containerElement.innerHTML = \`
      <div class="hayagriva-chat">
        <div class="hayagriva-header">
          <h3>\${botName} Assistant</h3>
          <button class="hayagriva-close-btn">&times;</button>
        </div>
        <div class="hayagriva-messages"></div>
        <div class="hayagriva-input-area">
          <input type="text" class="hayagriva-input" placeholder="Type a message...">
          <button class="hayagriva-send-btn">Send</button>
          <button class="hayagriva-voice-btn">🎤</button>
        </div>
      </div>
      <style>
        .hayagriva-chat {
          display: flex;
          flex-direction: column;
          height: 400px;
          border: 1px solid #e2e8f0;
          border-radius: 8px;
          overflow: hidden;
          font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", sans-serif;
        }
        .hayagriva-header {
          display: flex;
          justify-content: space-between;
          align-items: center;
          padding: 8px 16px;
          background-color: #f8fafc;
          border-bottom: 1px solid #e2e8f0;
        }
        .hayagriva-header h3 {
          margin: 0;
          font-size: 16px;
        }
        .hayagriva-close-btn {
          background: none;
          border: none;
          cursor: pointer;
          font-size: 18px;
        }
        .hayagriva-messages {
          flex: 1;
          padding: 16px;
          overflow-y: auto;
          display: flex;
          flex-direction: column;
          gap: 16px;
        }
        .hayagriva-message {
          max-width: 80%;
          padding: 10px 14px;
          border-radius: 18px;
          line-height: 1.4;
        }
        .hayagriva-user-message {
          align-self: flex-end;
          background-color: #3b82f6;
          color: white;
        }
        .hayagriva-assistant-message {
          align-self: flex-start;
          background-color: #f1f5f9;
          color: #475569;
        }
        .hayagriva-input-area {
          display: flex;
          gap: 8px;
          padding: 12px;
          border-top: 1px solid #e2e8f0;
        }
        .hayagriva-input {
          flex: 1;
          padding: 8px 12px;
          border: 1px solid #e2e8f0;
          border-radius: 20px;
          outline: none;
        }
        .hayagriva-send-btn, .hayagriva-voice-btn {
          background-color: #3b82f6;
          color: white;
          border: none;
          border-radius: 50%;
          width: 36px;
          height: 36px;
          display: flex;
          align-items: center;
          justify-content: center;
          cursor: pointer;
        }
      </style>
    \`;
    
    const messagesDiv = this.containerElement.querySelector('.hayagriva-messages');
    const inputField = this.containerElement.querySelector('.hayagriva-input');
    const sendButton = this.containerElement.querySelector('.hayagriva-send-btn');
    const voiceButton = this.containerElement.querySelector('.hayagriva-voice-btn');
    const closeButton = this.containerElement.querySelector('.hayagriva-close-btn');
    
    // Add initial message
    if (this.trainingData.length > 0) {
      const firstAssistantMessage = this.trainingData.find(msg => msg.role === 'assistant');
      if (firstAssistantMessage) {
        this._addMessageToChat('assistant', firstAssistantMessage.content);
      }
    } else {
      this._addMessageToChat('assistant', 'Hello! I am Hayagriva, your AI assistant. How can I help you today?');
    }
    
    // Add event listeners
    sendButton.addEventListener('click', () => {
      if (inputField.value.trim()) {
        this.sendMessage(inputField.value);
        inputField.value = '';
      }
    });
    
    inputField.addEventListener('keypress', (e) => {
      if (e.key === 'Enter' && inputField.value.trim()) {
        this.sendMessage(inputField.value);
        inputField.value = '';
      }
    });
    
    voiceButton.addEventListener('click', () => {
      this.startVoiceRecognition();
    });
    
    closeButton.addEventListener('click', () => {
      this.containerElement.innerHTML = '';
    });
  }
  
  /**
   * Private: Add a message to the chat interface
   * @param {string} role - 'user' or 'assistant'
   * @param {string} content - The message content
   */
  _addMessageToChat(role, content) {
    if (!this.containerElement) {
      console.error('Container element is not defined');
      return;
    }
    
    const messagesDiv = this.containerElement.querySelector('.hayagriva-messages');
    if (!messagesDiv) {
      console.error('Messages container not found');
      return;
    }
    
    const messageDiv = document.createElement('div');
    messageDiv.classList.add('hayagriva-message');
    messageDiv.classList.add(role === 'user' ? 'hayagriva-user-message' : 'hayagriva-assistant-message');
    messageDiv.textContent = content;
    messagesDiv.appendChild(messageDiv);
    messagesDiv.scrollTop = messagesDiv.scrollHeight;
  }
  
  /**
   * Private: Generate a response based on the input message
   * @param {string} message - The input message
   * @returns {string} - The generated response
   */
  _generateResponse(message) {
    // Simple response generation based on keywords in the message
    // In a real implementation, you might want to use a more sophisticated approach
    // or integrate with a backend API
    
    const lowerMessage = message.toLowerCase();
    
    // Check for direct matches in training data
    for (const data of this.trainingData) {
      if (data.role === 'user' && 
          data.content.toLowerCase().includes(lowerMessage) &&
          this.trainingData[this.trainingData.indexOf(data) + 1]?.role === 'assistant') {
        return this.trainingData[this.trainingData.indexOf(data) + 1].content;
      }
    }
    
    // Basic keyword matching
    if (lowerMessage.includes('hello') || lowerMessage.includes('hi')) {
      return "Namaste! How can I assist you today?";
    } else if (lowerMessage.includes('thank')) {
      return "You're very welcome! Is there anything else I can help you with?";
    } else if (lowerMessage.includes('name')) {
      return "I am Hayagriva, your AI assistant with an Indian perspective!";
    } else if (lowerMessage.includes('how are you')) {
      return "I'm functioning well, thank you for asking! How may I help you?";
    } else if (lowerMessage.includes('bye') || lowerMessage.includes('goodbye')) {
      return "Namaste! It was a pleasure helping you. Have a wonderful day!";
    } else {
      return "That's an interesting question. Would you like to explore this topic further?";
    }
  }
  
  /**
   * Private: Speak text using the Web Speech API
   * @param {string} text - The text to speak
   */
  _speakText(text) {
    if (!('speechSynthesis' in window)) {
      console.error('Speech synthesis not supported');
      return;
    }
    
    // Cancel any ongoing speech
    window.speechSynthesis.cancel();
    
    const utterance = new SpeechSynthesisUtterance(text);
    
    // Try to find an Indian English voice
    const voices = window.speechSynthesis.getVoices();
    const indianVoice = voices.find(voice => 
      voice.lang === 'en-IN' || 
      voice.name.includes('Indian') || 
      voice.name.includes('Hindi')
    );
    
    if (indianVoice) {
      utterance.voice = indianVoice;
    }
    
    window.speechSynthesis.speak(utterance);
  }
}

// Export for both browser and Node.js environments
if (typeof module !== 'undefined' && typeof module.exports !== 'undefined') {
  module.exports = HayagrivaBot;
} else {
  window.HayagrivaBot = HayagrivaBot;
}

/**
 * Usage example:
 * 
 * const bot = new HayagrivaBot({
 *   name: 'Hayagriva',
 *   voiceEnabled: true,
 *   onReady: (bot) => console.log('Bot is ready'),
 *   onMessageSent: (msg) => console.log('Message sent:', msg),
 *   onMessageReceived: (msg) => console.log('Message received:', msg)
 * });
 * 
 * bot.mount('#chat-container');
 * 
 * // Send a message programmatically
 * bot.sendMessage('Hello Hayagriva!');
 * 
 * // Start voice recognition
 * document.querySelector('#voice-button').addEventListener('click', () => {
 *   bot.startVoiceRecognition();
 * });
 */
`;

  return code;
};

/**
 * Generates a complete web application based on a text prompt
 * 
 * @param prompt User's description of the desired web app
 * @param options Configuration options for the generated app
 * @returns String containing the web application code
 */
export const generateAppCode = (prompt: string, options: {
  framework?: string;
  cssFramework?: string;
  responsive?: boolean;
  accessibility?: boolean;
} = {}) => {
  // For web app creation, first analyze the code requirements
  const requirements = parseAppRequirements(prompt);
  
  // Apply any explicit options from the UI
  if (options.responsive !== undefined) {
    requirements.design.responsive = options.responsive;
  }
  
  // Generate the app code using the extracted requirements
  const appCode = generateAppStructure(requirements);
  
  return appCode;
};

/**
 * Main code generation function
 * 
 * @param prompt The user's prompt describing what code to generate
 * @param options Additional options for code generation
 * @returns Generated code as a string
 */
export const generateCode = (prompt: string, options: any = {}) => {
  // Analyze the prompt to understand what kind of code to generate
  const requirements = analyzeCodeRequirements(prompt);
  
  // Generate the appropriate code
  return generateCodeFromRequirements(requirements);
};
